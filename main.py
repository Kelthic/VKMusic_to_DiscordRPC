import configparser
import time
import requests
import pypresence
from chardet.universaldetector import UniversalDetector

print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...")

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = configparser.ConfigParser()
detector = UniversalDetector()
with open('config.ini', 'rb') as fh:
    for line in fh:
        detector.feed(line)
        if detector.done:
            break
    detector.close()
config.read("config.ini", encoding=detector.result["encoding"])

# –ü–æ–ª—É—á–∞–µ–º app_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
app_id = config['Discord']['app_id']


def get_user_status(user_token, user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É."""
    url = f"https://api.vk.com/method/users.get?user_ids={user_id}&fields=status,status_audio&access_token={user_token}&v=5.131"
    return requests.get(url).json()


def get_track_info(owner_id, audio_id, user_token):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –∏ –µ–≥–æ –æ–±–ª–æ–∂–∫—É."""
    url = f"https://api.vk.com/method/audio.getById?audios={owner_id}_{audio_id}&access_token={user_token}&v=5.131"
    return requests.get(url).json()


def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM:SS."""
    minutes = seconds // 60
    seconds %= 60
    return f"{minutes:02}:{seconds:02}"


def create_progress_bar(current, total, length=8):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä."""
    progress = int((current / total) * length)
    return f"[{'‚ñ∞' * progress}{'‚ñ±' * (length - progress)}]"


def run():
    try:
        presence = pypresence.Presence(app_id)
        presence.connect()

        user_token = config['VK']['user_token']
        user_id = config['VK']['id']

        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
        time.sleep(5)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
        last_track_id = None
        last_artist = None
        last_title = None
        last_image_url = None
        track_start_time = None

        while True:
            default_image = "https://sun9-50.userapi.com/impg/ZvkDRL4FWR-mF3kdYTKMzG811xV6kj4jBtiy8A/xbgImcIHYgc.jpg?size=1024x1024&quality=95&sign=c0a95ce9e37c55f35f72dc18ca8471eb&type=album"
            activity = {"large_image": default_image}

            user_status = get_user_status(user_token, user_id)
            if 'response' not in user_status or len(user_status['response']) == 0:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                continue

            res = user_status['response'][0]

            if "status_audio" not in res:
                state = "üéß No playable music."
                activity.update({'state': state})
            else:
                curr_music = res['status_audio']
                state = f""
                details = f"üó£Artist: {curr_music['artist']} | üìúTitle: {curr_music['title']}"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                artist = curr_music['artist']
                title = curr_music['title']
                release_id = curr_music.get("release_audio_id")
                large_image = default_image

                if release_id:
                    owner_id, audio_id = release_id.split('_')
                    track_info = get_track_info(owner_id, audio_id, user_token)

                    if 'response' in track_info and len(track_info['response']) > 0:
                        track_data = track_info['response'][0]
                        album = track_data.get('album', {})
                        large_image = album.get('thumb', {}).get('photo_270', default_image)

                # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
                if artist != last_artist or title != last_title or large_image != last_image_url:
                    print("\n-----------------------------")
                    print(f"üé∂ New track info:")
                    print(f"üó£ Artist: {artist}")
                    print(f"üìú Title: {title}")
                    print(f"üñº Cover Image URL: {large_image}")
                    print("-----------------------------\n")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    last_artist = artist
                    last_title = title
                    last_image_url = large_image

                duration = int(curr_music.get('duration', 1))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                stream_duration = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º

                # –ï—Å–ª–∏ —Ç—Ä–µ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if curr_music['id'] != last_track_id:
                    last_track_id = curr_music['id']
                    track_start_time = time.time()  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ç—Ä–µ–∫–∞
                else:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º `stream_duration` –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
                    stream_duration = int(min(time.time() - track_start_time, duration))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

                elapsed_time = format_time(stream_duration)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º stream_duration –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                total_time = format_time(duration)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º duration –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                progress_bar = create_progress_bar(stream_duration, duration)

                state += f"\n{progress_bar} {elapsed_time} / {total_time}"

                activity.update({'state': state, 'details': details, 'large_image': large_image})

            presence.update(**activity)
            time.sleep(5)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–∞

    except OSError:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        run()


if __name__ == "__main__":
    run()
